"""
Django settings for hrm project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import pymysql
pymysql.version_info = (1, 4, 3, "final", 0)
pymysql.install_as_MySQLdb()
import os
from dotenv import load_dotenv
load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
import cx_Oracle
cx_Oracle.init_oracle_client(lib_dir="C:/oracle/instantclient_21_17")# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/
import cx_Oracle
# print(cx_Oracle.version)
SECRET_KEY = os.getenv('SECRET_KEY')
DEBUG =True

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'hrms.vigyantechnology.com').split(',')
ALLOWED_HOSTS.append('stages-driven-here-nominated.trycloudflare.com') 
ALLOWED_HOSTS.append('192.168.1.17') #for app ip
ALLOWED_HOSTS.append('hrms.webesidetechnology.com') #for app ip

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "https://stages-driven-here-nominated.trycloudflare.com",
    "http://192.168.1.3:5173",  # your local address
    'hrms.webesidetechnology.com', 'www.hrms.webesidetechnology.com'
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "https://stages-driven-here-nominated.trycloudflare.com",
    "http://192.168.1.3:5173",
      'hrms.webesidetechnology.com', 'www.hrms.webesidetechnology.com'  # your local address
]

  # Add your frontend URL here if needed
CORS_ALLOWED_ORIGINS.append("http://192.168.1.3:5173")
CSRF_TRUSTED_ORIGINS.append("http://192.168.1.3:5173")
CSRF_TRUSTED_ORIGINS.append('hrms.webesidetechnology.com', 'www.hrms.webesidetechnology.com')

# Add this setting if using ngrok
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
    
AUTH_USER_MODEL = 'users.User'
# In settings.py
LOGIN_URL = '/login/'  # Instead of '/accounts/login/'
# CSRF settings - added this setting

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ]
}
from datetime import timedelta

SIMPLE_JWT = {
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'BLACKLIST_AFTER_ROTATION': False,
    'ROTATE_REFRESH_TOKENS': True,
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=12),  # <- Access token 5 min valid
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
}

# settings.py

TIME_ZONE = 'Asia/Kolkata'   # 🕒 Set your preferred timezone
USE_TZ = True                # ⚠️ This enables timezone-aware datetime

AUTHENTICATION_BACKENDS = [
    'users.auth_backends.CompanyStatusAuthBackend',
    'users.authentication.EmailOrUsernameBackend',  # 👈 Tera custom backend
    'django.contrib.auth.backends.ModelBackend',    # fallback
]

# Configure logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/activity.log',
            'maxBytes': 15728640,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'activities': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Create logs directory if it doesn't exist
import os
if not os.path.exists('logs'):
    os.makedirs('logs')

# CORS अतिरिक्त सेटिंग्स
CORS_ALLOW_CREDENTIALS = True

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'employees',
    'companies',
    'rest_framework',       # if you're using DRF
    'corsheaders',
    'sslserver'
]
INSTALLED_APPS += ['rest_framework_simplejwt.token_blacklist']
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'companies.middleware.SubscriptionCheckMiddleware',
    'companies.middleware.CompanyStatusMiddleware',
    'users.middleware.AccessLevelMiddleware',
]


ROOT_URLCONF = 'hrm.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hrm.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.oracle',
        'NAME': 'XE', 
        'USER': 'HRMSVPS',
        'PASSWORD': 'password123',
        'HOST': '93.127.198.15',
        'PORT': '1521',
    }
}

   



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'

# USE_I18N = True

# USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'  # Add the leading slash
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Change directory name
# Add this new setting
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
# settings.py
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'